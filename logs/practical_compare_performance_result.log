# JMH version: 1.25
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-LTS
# VM options: -Xms1G -Xmx4G
# Warmup: 3 iterations, 10 s each
# Measurement: 3 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.woodock.PracticalComparePerformance.imperativeTest

# Run progress: 0.00% complete, ETA 00:03:00
# Fork: 1 of 1
# Warmup Iteration   1: 134.124 ms/op
# Warmup Iteration   2: 130.140 ms/op
# Warmup Iteration   3: 139.632 ms/op
Iteration   1: 119.985 ms/op
Iteration   2: 119.614 ms/op
Iteration   3: 111.913 ms/op


Result "com.woodock.PracticalComparePerformance.imperativeTest":
  117.171 ±(99.9%) 83.142 ms/op [Average]
  (min, avg, max) = (111.913, 117.171, 119.985), stdev = 4.557
  CI (99.9%): [34.029, 200.312] (assumes normal distribution)


# JMH version: 1.25
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-LTS
# VM options: -Xms1G -Xmx4G
# Warmup: 3 iterations, 10 s each
# Measurement: 3 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.woodock.PracticalComparePerformance.parallelStreamTest

# Run progress: 33.33% complete, ETA 00:02:03
# Fork: 1 of 1
# Warmup Iteration   1: 41.644 ms/op
# Warmup Iteration   2: 38.073 ms/op
# Warmup Iteration   3: 45.215 ms/op
Iteration   1: 45.720 ms/op
Iteration   2: 50.336 ms/op
Iteration   3: 46.180 ms/op


Result "com.woodock.PracticalComparePerformance.parallelStreamTest":
  47.412 ±(99.9%) 46.387 ms/op [Average]
  (min, avg, max) = (45.720, 47.412, 50.336), stdev = 2.543
  CI (99.9%): [1.025, 93.799] (assumes normal distribution)


# JMH version: 1.25
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-LTS
# VM options: -Xms1G -Xmx4G
# Warmup: 3 iterations, 10 s each
# Measurement: 3 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.woodock.PracticalComparePerformance.streamTest

# Run progress: 66.67% complete, ETA 00:01:01
# Fork: 1 of 1
# Warmup Iteration   1: 186.431 ms/op
# Warmup Iteration   2: 189.682 ms/op
# Warmup Iteration   3: 143.929 ms/op
Iteration   1: 123.528 ms/op
Iteration   2: 120.741 ms/op
Iteration   3: 127.945 ms/op


Result "com.woodock.PracticalComparePerformance.streamTest":
  124.072 ±(99.9%) 66.270 ms/op [Average]
  (min, avg, max) = (120.741, 124.072, 127.945), stdev = 3.632
  CI (99.9%): [57.802, 190.341] (assumes normal distribution)


# Run complete. Total time: 00:03:05

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                       Mode  Cnt    Score    Error  Units
PracticalComparePerformance.imperativeTest      avgt    3  117.171 ± 83.142  ms/op
PracticalComparePerformance.parallelStreamTest  avgt    3   47.412 ± 46.387  ms/op
PracticalComparePerformance.streamTest          avgt    3  124.072 ± 66.270  ms/op

Process finished with exit code 0
