# JMH version: 1.25
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-LTS
# VM options: -Xms1G -Xmx4G
# Warmup: 5 iterations, 2 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.woodock.ImpracticalComparePerformance.iterativeSum

# Run progress: 0.00% complete, ETA 00:04:00
# Fork: 1 of 1
# Warmup Iteration   1: 3.001 ms/op
# Warmup Iteration   2: 2.840 ms/op
# Warmup Iteration   3: 2.769 ms/op
# Warmup Iteration   4: 3.007 ms/op
# Warmup Iteration   5: 2.833 ms/op
Iteration   1: 2.870 ms/op
Iteration   2: 2.874 ms/op
Iteration   3: 2.886 ms/op
Iteration   4: 2.811 ms/op
Iteration   5: 2.804 ms/op


Result "com.woodock.ImpracticalComparePerformance.iterativeSum":
  2.849 ±(99.9%) 0.148 ms/op [Average]
  (min, avg, max) = (2.804, 2.849, 2.886), stdev = 0.038
  CI (99.9%): [2.701, 2.996] (assumes normal distribution)


# JMH version: 1.25
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-LTS
# VM options: -Xms1G -Xmx4G
# Warmup: 5 iterations, 2 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.woodock.ImpracticalComparePerformance.parallelRangedSum

# Run progress: 25.00% complete, ETA 00:03:01
# Fork: 1 of 1
# Warmup Iteration   1: 1.467 ms/op
# Warmup Iteration   2: 1.414 ms/op
# Warmup Iteration   3: 1.325 ms/op
# Warmup Iteration   4: 1.403 ms/op
# Warmup Iteration   5: 1.316 ms/op
Iteration   1: 1.348 ms/op
Iteration   2: 1.396 ms/op
Iteration   3: 1.335 ms/op
Iteration   4: 1.502 ms/op
Iteration   5: 1.479 ms/op


Result "com.woodock.ImpracticalComparePerformance.parallelRangedSum":
  1.412 ±(99.9%) 0.291 ms/op [Average]
  (min, avg, max) = (1.335, 1.412, 1.502), stdev = 0.076
  CI (99.9%): [1.121, 1.703] (assumes normal distribution)


# JMH version: 1.25
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-LTS
# VM options: -Xms1G -Xmx4G
# Warmup: 5 iterations, 2 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.woodock.ImpracticalComparePerformance.parallelSum

# Run progress: 50.00% complete, ETA 00:02:01
# Fork: 1 of 1
# Warmup Iteration   1: 577.035 ms/op
# Warmup Iteration   2: 410.816 ms/op
# Warmup Iteration   3: 668.535 ms/op
# Warmup Iteration   4: 276.820 ms/op
# Warmup Iteration   5: 268.532 ms/op
Iteration   1: 227.206 ms/op
Iteration   2: 241.113 ms/op
Iteration   3: 234.755 ms/op
Iteration   4: 206.338 ms/op
Iteration   5: 198.183 ms/op


Result "com.woodock.ImpracticalComparePerformance.parallelSum":
  221.519 ±(99.9%) 71.173 ms/op [Average]
  (min, avg, max) = (198.183, 221.519, 241.113), stdev = 18.483
  CI (99.9%): [150.346, 292.691] (assumes normal distribution)


# JMH version: 1.25
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-LTS
# VM options: -Xms1G -Xmx4G
# Warmup: 5 iterations, 2 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.woodock.ImpracticalComparePerformance.sequentialSum

# Run progress: 75.00% complete, ETA 00:01:01
# Fork: 1 of 1
# Warmup Iteration   1: 147.286 ms/op
# Warmup Iteration   2: 116.787 ms/op
# Warmup Iteration   3: 110.641 ms/op
# Warmup Iteration   4: 115.818 ms/op
# Warmup Iteration   5: 108.432 ms/op
Iteration   1: 110.665 ms/op
Iteration   2: 98.159 ms/op
Iteration   3: 114.173 ms/op
Iteration   4: 99.299 ms/op
Iteration   5: 108.351 ms/op


Result "com.woodock.ImpracticalComparePerformance.sequentialSum":
  106.129 ±(99.9%) 27.255 ms/op [Average]
  (min, avg, max) = (98.159, 106.129, 114.173), stdev = 7.078
  CI (99.9%): [78.874, 133.384] (assumes normal distribution)


# Run complete. Total time: 00:04:04

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        Mode  Cnt    Score    Error  Units
ImpracticalComparePerformance.iterativeSum       avgt    5    2.849 ±  0.148  ms/op
ImpracticalComparePerformance.parallelRangedSum  avgt    5    1.412 ±  0.291  ms/op
ImpracticalComparePerformance.parallelSum        avgt    5  221.519 ± 71.173  ms/op
ImpracticalComparePerformance.sequentialSum      avgt    5  106.129 ± 27.255  ms/op

Process finished with exit code 0
